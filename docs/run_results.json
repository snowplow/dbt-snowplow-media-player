{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.7", "generated_at": "2025-07-28T10:47:00.321108Z", "invocation_id": "114b056c-76f8-4e2a-a56f-fed415cc0dab", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.273150Z", "completed_at": "2025-07-28T10:46:53.302846Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.303715Z", "completed_at": "2025-07-28T10:46:53.303733Z"}], "thread_id": "Thread-1", "execution_time": 0.03821229934692383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_base_quarantined_sessions", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n        with prep as (\n        select\n            \n                cast(null as \n    TEXT\n) session_identifier\n            \n        )\n\n        select *\n\n        from prep\n        where false\n\n    ", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_base_quarantined_sessions"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.286484Z", "completed_at": "2025-07-28T10:46:53.310329Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.311145Z", "completed_at": "2025-07-28T10:46:53.311156Z"}], "thread_id": "Thread-2", "execution_time": 0.04191160202026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_incremental_manifest", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n        with prep as (\n        select\n            cast(null as \n    TEXT\n) model,\n            cast('1970-01-01' as timestamp) as last_success\n        )\n\n        select *\n\n        from prep\n        where false\n    ", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_incremental_manifest"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.313979Z", "completed_at": "2025-07-28T10:46:53.317344Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.317983Z", "completed_at": "2025-07-28T10:46:53.317991Z"}], "thread_id": "Thread-2", "execution_time": 0.005430936813354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.snowplow_media_player.snowplow_media_player-on-run-start-2", "compiled": true, "compiled_code": "", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.291639Z", "completed_at": "2025-07-28T10:46:53.319813Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.322711Z", "completed_at": "2025-07-28T10:46:53.322722Z"}], "thread_id": "Thread-3", "execution_time": 0.05209016799926758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_pivot_base", "compiled": true, "compiled_code": "\n\n\n\nwith prep as (\n\n  \n\n    select\n\n      10 as percent_progress\n\n    \n\n      union all\n\n    \n\n  \n\n    select\n\n      25 as percent_progress\n\n    \n\n      union all\n\n    \n\n  \n\n    select\n\n      50 as percent_progress\n\n    \n\n      union all\n\n    \n\n  \n\n    select\n\n      75 as percent_progress\n\n    \n\n      union all\n\n    \n\n  \n\n    select\n\n      100 as percent_progress\n\n    \n\n  \n\n)\n\n, weight_calc as (\n\n  select\n    percent_progress,\n    percent_progress\n    - lag(percent_progress, 1) over (order by percent_progress) as weight_rate,\n    first_value(percent_progress)\n      over (\n        order by\n          percent_progress\n        rows between unbounded preceding and unbounded following\n      ) as first_item\n\n  from prep\n\n  order by percent_progress\n\n)\n\nselect\n  percent_progress,\n  coalesce(weight_rate, first_item) as weight_rate\n\nfrom weight_calc", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_pivot_base"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.297726Z", "completed_at": "2025-07-28T10:46:53.320591Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.323643Z", "completed_at": "2025-07-28T10:46:53.323650Z"}], "thread_id": "Thread-4", "execution_time": 0.05235624313354492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.snowplow_media_player.snowplow_media_player-on-run-end-1", "compiled": true, "compiled_code": "\n                \n            ", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.306710Z", "completed_at": "2025-07-28T10:46:53.322025Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.325160Z", "completed_at": "2025-07-28T10:46:53.325169Z"}], "thread_id": "Thread-1", "execution_time": 0.019845962524414062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.snowplow_media_player.snowplow_media_player-on-run-start-0", "compiled": true, "compiled_code": "\n\n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.327611Z", "completed_at": "2025-07-28T10:46:53.329841Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.332576Z", "completed_at": "2025-07-28T10:46:53.332586Z"}], "thread_id": "Thread-2", "execution_time": 0.011364221572875977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_media_player_integration_tests.snowplow_media_player_base_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.336692Z", "completed_at": "2025-07-28T10:46:53.338934Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.347027Z", "completed_at": "2025-07-28T10:46:53.347041Z"}], "thread_id": "Thread-3", "execution_time": 0.015920162200927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_media_player_integration_tests.snowplow_media_player_events", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.339547Z", "completed_at": "2025-07-28T10:46:53.342592Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.348048Z", "completed_at": "2025-07-28T10:46:53.348055Z"}], "thread_id": "Thread-4", "execution_time": 0.016208648681640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_media_player_integration_tests.snowplow_media_player_media_ad_views_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.344096Z", "completed_at": "2025-07-28T10:46:53.346363Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.349550Z", "completed_at": "2025-07-28T10:46:53.349557Z"}], "thread_id": "Thread-1", "execution_time": 0.01615142822265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_media_player_integration_tests.snowplow_media_player_media_ads_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.351991Z", "completed_at": "2025-07-28T10:46:53.354126Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.356834Z", "completed_at": "2025-07-28T10:46:53.356845Z"}], "thread_id": "Thread-2", "execution_time": 0.013695001602172852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowplow_media_player_integration_tests.snowplow_media_player_media_stats_expected", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.369910Z", "completed_at": "2025-07-28T10:46:53.384143Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.386137Z", "completed_at": "2025-07-28T10:46:53.386145Z"}], "thread_id": "Thread-4", "execution_time": 0.030069589614868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.snowplow_media_player.snowplow_media_player-on-run-start-1", "compiled": true, "compiled_code": "", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.374649Z", "completed_at": "2025-07-28T10:46:53.391743Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.395480Z", "completed_at": "2025-07-28T10:46:53.395489Z"}], "thread_id": "Thread-1", "execution_time": 0.03786277770996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_base_quarantined_sessions_session_identifier.829a79930e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_identifier\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_base_quarantined_sessions\nwhere session_identifier is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.387147Z", "completed_at": "2025-07-28T10:46:53.397114Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.399029Z", "completed_at": "2025-07-28T10:46:53.399039Z"}], "thread_id": "Thread-2", "execution_time": 0.025315046310424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_incremental_manifest_model.0f87ae22aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect model\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_incremental_manifest\nwhere model is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.400576Z", "completed_at": "2025-07-28T10:46:53.415510Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.421542Z", "completed_at": "2025-07-28T10:46:53.421550Z"}], "thread_id": "Thread-4", "execution_time": 0.02521824836730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_base_quarantined_sessions_session_identifier.5250e04a39", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    session_identifier as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_base_quarantined_sessions\nwhere session_identifier is not null\ngroup by session_identifier\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.410362Z", "completed_at": "2025-07-28T10:46:53.420978Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.422725Z", "completed_at": "2025-07-28T10:46:53.422732Z"}], "thread_id": "Thread-1", "execution_time": 0.02287745475769043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_incremental_manifest_model.0c055a3c08", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    model as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_incremental_manifest\nwhere model is not null\ngroup by model\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.416267Z", "completed_at": "2025-07-28T10:46:53.425245Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.427322Z", "completed_at": "2025-07-28T10:46:53.427330Z"}], "thread_id": "Thread-2", "execution_time": 0.017835140228271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_pivot_base_percent_progress.2c08f44ca8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect percent_progress\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_pivot_base\nwhere percent_progress is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.430403Z", "completed_at": "2025-07-28T10:46:53.445236Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.445974Z", "completed_at": "2025-07-28T10:46:53.445982Z"}], "thread_id": "Thread-4", "execution_time": 0.02025580406188965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_pivot_base_percent_progress.f340fd7fc8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    percent_progress as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_pivot_base\nwhere percent_progress is not null\ngroup by percent_progress\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.436274Z", "completed_at": "2025-07-28T10:46:53.448232Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.449513Z", "completed_at": "2025-07-28T10:46:53.449535Z"}], "thread_id": "Thread-1", "execution_time": 0.022991418838500977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player_integration_tests.snowplow_media_player_events_stg", "compiled": true, "compiled_code": "\n\nwith prep as (\n  select\n    * exclude (\n      contexts_com_snowplowanalytics_snowplow_web_page_1_0_0,\n      contexts_com_snowplowanalytics_mobile_screen_1_0_0,\n      contexts_com_snowplowanalytics_snowplow_client_session_1_0_2,\n      contexts_org_whatwg_video_element_1_0_0,\n      contexts_org_whatwg_media_element_1_0_0,\n      contexts_com_youtube_youtube_1_0_0,\n      contexts_com_snowplowanalytics_snowplow_media_player_1_0_0,\n      contexts_com_snowplowanalytics_snowplow_media_player_2_0_0,\n      contexts_com_snowplowanalytics_snowplow_media_session_1_0_0,\n      contexts_com_snowplowanalytics_snowplow_media_ad_1_0_0,\n      contexts_com_snowplowanalytics_snowplow_media_ad_break_1_0_0,\n      unstruct_event_com_snowplowanalytics_snowplow_media_player_event_1_0_0,\n      unstruct_event_com_snowplowanalytics_snowplow_media_ad_quartile_event_1_0_0,\n      sf_contexts_com_snowplowanalytics_snowplow_client_session_1_0_2,\n      sf_contexts_org_whatwg_video_element_1_0_0,\n      sf_contexts_org_whatwg_media_element_1_0_0,\n      sf_contexts_com_youtube_youtube_1_0_0,\n      sf_contexts_com_snowplowanalytics_snowplow_media_player_1_0_0,\n      sf_contexts_com_snowplowanalytics_snowplow_media_player_2_0_0,\n      sf_contexts_com_snowplowanalytics_snowplow_media_session_1_0_0,\n      sf_contexts_com_snowplowanalytics_snowplow_media_ad_1_0_0,\n      sf_contexts_com_snowplowanalytics_snowplow_media_ad_break_1_0_0,\n      sf_unstruct_event_com_snowplowanalytics_snowplow_media_ad_quartile_event_1_0_0\n    ),\n    parse_json(ev.contexts_com_snowplowanalytics_snowplow_web_page_1_0_0) as contexts_com_snowplowanalytics_snowplow_web_page_1,\n    parse_json(ev.contexts_com_snowplowanalytics_mobile_screen_1_0_0) as contexts_com_snowplowanalytics_mobile_screen_1,\n    parse_json(ev.sf_contexts_com_snowplowanalytics_snowplow_client_session_1_0_2) as contexts_com_snowplowanalytics_snowplow_client_session_1,\n    parse_json(ev.sf_contexts_org_whatwg_video_element_1_0_0) as contexts_org_whatwg_video_element_1,\n    parse_json(ev.sf_contexts_org_whatwg_media_element_1_0_0) as contexts_org_whatwg_media_element_1,\n    parse_json(ev.sf_contexts_com_youtube_youtube_1_0_0) as contexts_com_youtube_youtube_1,\n    parse_json(ev.sf_contexts_com_snowplowanalytics_snowplow_media_player_1_0_0) as contexts_com_snowplowanalytics_snowplow_media_player_1,\n    parse_json(ev.sf_contexts_com_snowplowanalytics_snowplow_media_player_2_0_0) as contexts_com_snowplowanalytics_snowplow_media_player_2,\n    parse_json(ev.sf_contexts_com_snowplowanalytics_snowplow_media_session_1_0_0) as contexts_com_snowplowanalytics_snowplow_media_session_1,\n    parse_json(ev.sf_contexts_com_snowplowanalytics_snowplow_media_ad_1_0_0) as contexts_com_snowplowanalytics_snowplow_media_ad_1,\n    parse_json(ev.sf_contexts_com_snowplowanalytics_snowplow_media_ad_break_1_0_0) as contexts_com_snowplowanalytics_snowplow_media_ad_break_1,\n    parse_json(ev.unstruct_event_com_snowplowanalytics_snowplow_media_player_event_1_0_0) as unstruct_event_com_snowplowanalytics_snowplow_media_player_event_1,\n    parse_json(ev.sf_unstruct_event_com_snowplowanalytics_snowplow_media_ad_quartile_event_1_0_0) as unstruct_event_com_snowplowanalytics_snowplow_media_ad_quartile_event_1\n\n  from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_events as ev\n)\n\nselect\n  *\n\nfrom prep", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_events_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.441500Z", "completed_at": "2025-07-28T10:46:53.450436Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.454653Z", "completed_at": "2025-07-28T10:46:53.454663Z"}], "thread_id": "Thread-2", "execution_time": 0.014789342880249023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player_integration_tests.snowplow_media_player_media_ad_views_expected_stg", "compiled": true, "compiled_code": "\n\n\nselect *\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ad_views_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ad_views_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.451090Z", "completed_at": "2025-07-28T10:46:53.455979Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:53.456574Z", "completed_at": "2025-07-28T10:46:53.456580Z"}], "thread_id": "Thread-4", "execution_time": 0.009147882461547852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player_integration_tests.snowplow_media_player_media_ads_expected_stg", "compiled": true, "compiled_code": "\n\n\nselect *\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ads_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ads_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:53.360997Z", "completed_at": "2025-07-28T10:46:54.095900Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:54.096493Z", "completed_at": "2025-07-28T10:46:54.096505Z"}], "thread_id": "Thread-3", "execution_time": 0.9456052780151367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_base_new_event_limits", "compiled": true, "compiled_code": "\n\n\n      select\n        \n\n    dateadd(\n        hour,\n        -6,\n        \n        cast('2022-01-20 21:33:59.119000' as timestamp)\n    \n        )\n\n as lower_limit,\n        least(\n\n    dateadd(\n        day,\n        30,\n        \n        cast('2022-01-20 21:33:59.119000' as timestamp)\n    \n        )\n\n,\n              \n    convert_timezone('UTC', convert_timezone('UTC', current_timestamp()))::timestamp\n) as upper_limit\n    ", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_new_event_limits"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:54.304808Z", "completed_at": "2025-07-28T10:46:55.321520Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:55.322125Z", "completed_at": "2025-07-28T10:46:55.322138Z"}], "thread_id": "Thread-1", "execution_time": 1.227076530456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_base_sessions_lifecycle_manifest", "compiled": true, "compiled_code": "\n\n\n\n\n\n        with new_events_session_ids_init as (\n            select\n            \n                COALESCE(\n                    \ne.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:mediaSessionId::TEXT\n,\ne.contexts_com_snowplowanalytics_mobile_screen_1[0]:id::TEXT\n,\ne.contexts_com_snowplowanalytics_snowplow_web_page_1[0]:id::TEXT\n,NULL\n                ) as session_identifier,\n                max(\n                    COALESCE(\n                        e.domain_userid,\ne.contexts_com_snowplowanalytics_snowplow_client_session_1[0]:userId::TEXT\n,NULL\n                    )\n                ) as user_identifier, -- Edge case 1: Arbitary selection to avoid window function like first_value.\n            \n                min(collector_tstamp) as start_tstamp,\n                max(collector_tstamp) as end_tstamp\n\n            from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_events_stg e\n\n            where\n            \n                dvce_sent_tstamp <= \n\n    dateadd(\n        day,\n        3,\n        dvce_created_tstamp\n        )\n\n\n             -- don't process data that's too late\n                and collector_tstamp >= \n        cast('2022-01-17 00:00:00' as timestamp)\n    \n                and collector_tstamp <= \n        cast('2022-09-17 00:00:00' as timestamp)\n    \n                and (1=1)\n                and cast(True as boolean) --don't reprocess sessions that have already been processed.\n                \n\n            group by 1\n        ), new_events_session_ids as (\n            select *\n            from new_events_session_ids_init e\n            \n\n        )\n        \n\n        , previous_sessions as (\n        select *\n\n        from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_base_sessions_lifecycle_manifest\n\n        where start_tstamp >= \n        cast('2020-01-18 00:00:00' as timestamp)\n    \n        and cast(True as boolean) --don't reprocess sessions that have already been processed.\n        )\n\n        , session_lifecycle as (\n        select\n            ns.session_identifier,\n            coalesce(self.user_identifier, ns.user_identifier) as user_identifier, -- Edge case 1: Take previous value to keep domain_userid consistent. Not deterministic but performant\n            least(ns.start_tstamp, coalesce(self.start_tstamp, ns.start_tstamp)) as start_tstamp,\n            greatest(ns.end_tstamp, coalesce(self.end_tstamp, ns.end_tstamp)) as end_tstamp -- BQ 1 NULL will return null hence coalesce\n\n        from new_events_session_ids ns\n        left join previous_sessions as self\n            on ns.session_identifier = self.session_identifier\n\n        where\n            self.session_identifier is null -- process all new sessions\n            or self.end_tstamp < \n\n    dateadd(\n        day,\n        3,\n        self.start_tstamp\n        )\n\n --stop updating sessions exceeding 3 days\n        )\n\n        \n\n        select\n        sl.session_identifier,\n        sl.user_identifier,\n        sl.start_tstamp,\n        least(\n\n    dateadd(\n        day,\n        3,\n        sl.start_tstamp\n        )\n\n, sl.end_tstamp) as end_tstamp -- limit session length to max_session_days\n        \n\n        from session_lifecycle sl\n    \n\nwhere session_identifier is not null", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_base_sessions_lifecycle_manifest"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:55.544925Z", "completed_at": "2025-07-28T10:46:55.622472Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:55.627864Z", "completed_at": "2025-07-28T10:46:55.627877Z"}], "thread_id": "Thread-3", "execution_time": 0.09393596649169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_base_sessions_lifecycle_manifest_end_tstamp.4d716492e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect end_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_base_sessions_lifecycle_manifest\nwhere end_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:55.551872Z", "completed_at": "2025-07-28T10:46:55.628885Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:55.632077Z", "completed_at": "2025-07-28T10:46:55.632086Z"}], "thread_id": "Thread-2", "execution_time": 0.09506106376647949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_base_sessions_lifecycle_manifest_session_identifier.4df59e2c3a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_identifier\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_base_sessions_lifecycle_manifest\nwhere session_identifier is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:55.557368Z", "completed_at": "2025-07-28T10:46:55.633075Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:55.634813Z", "completed_at": "2025-07-28T10:46:55.634820Z"}], "thread_id": "Thread-1", "execution_time": 0.09711432456970215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_base_sessions_lifecycle_manifest_start_tstamp.ec7cbf0c83", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_tstamp\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_base_sessions_lifecycle_manifest\nwhere start_tstamp is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:55.636418Z", "completed_at": "2025-07-28T10:46:55.641377Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:55.641964Z", "completed_at": "2025-07-28T10:46:55.641971Z"}], "thread_id": "Thread-3", "execution_time": 0.008172035217285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_base_sessions_lifecycle_manifest_session_identifier.6804cb2270", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    session_identifier as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_base_sessions_lifecycle_manifest\nwhere session_identifier is not null\ngroup by session_identifier\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:55.538451Z", "completed_at": "2025-07-28T10:46:56.238627Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:56.239221Z", "completed_at": "2025-07-28T10:46:56.239232Z"}], "thread_id": "Thread-4", "execution_time": 0.9335448741912842, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_base_sessions_this_run", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n        select\n        s.session_identifier,\n        s.user_identifier,\n        s.start_tstamp,\n        -- end_tstamp used in next step to limit events. When backfilling, set end_tstamp to upper_limit if end_tstamp > upper_limit.\n        -- This ensures we don't accidentally process events after upper_limit\n        case when s.end_tstamp > \n        cast('2022-09-17 00:00:00' as timestamp)\n     then \n        cast('2022-09-17 00:00:00' as timestamp)\n     else s.end_tstamp end as end_tstamp\n\n        from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snowplow_manifest.snowplow_media_player_base_sessions_lifecycle_manifest s\n\n        where\n        -- General window of start_tstamps to limit table scans. Logic complicated by backfills.\n        -- To be within the run, session start_tstamp must be >= lower_limit - max_session_days as we limit end_tstamp in manifest to start_tstamp + max_session_days\n        s.start_tstamp >= \n        cast('2022-01-14 00:00:00' as timestamp)\n    \n        and s.start_tstamp <= \n        cast('2022-09-17 00:00:00' as timestamp)\n    \n        -- Select sessions within window that either; start or finish between lower & upper limit, start and finish outside of lower and upper limits\n        and not (s.start_tstamp > \n        cast('2022-09-17 00:00:00' as timestamp)\n     or s.end_tstamp < \n        cast('2022-01-17 00:00:00' as timestamp)\n    )\n    ", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_sessions_this_run"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:56.489732Z", "completed_at": "2025-07-28T10:46:56.531225Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:56.532931Z", "completed_at": "2025-07-28T10:46:56.532945Z"}], "thread_id": "Thread-1", "execution_time": 0.06184697151184082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_base_sessions_this_run_session_identifier.64f9729c78", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_identifier\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_sessions_this_run\nwhere session_identifier is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:56.515288Z", "completed_at": "2025-07-28T10:46:56.534526Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:56.535998Z", "completed_at": "2025-07-28T10:46:56.536005Z"}], "thread_id": "Thread-3", "execution_time": 0.06367325782775879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_base_sessions_this_run_session_identifier.cc5d97cf3e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    session_identifier as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_sessions_this_run\nwhere session_identifier is not null\ngroup by session_identifier\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:56.473721Z", "completed_at": "2025-07-28T10:46:57.172862Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.173509Z", "completed_at": "2025-07-28T10:46:57.173521Z"}], "thread_id": "Thread-2", "execution_time": 0.9325339794158936, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_base_events_this_run", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n  \n  \n\n\n\n  \n  \n\n\n\n  \n\n\n\n  \n\n\n\n  \n\n\n\n  \n\n\n\n\n\n\n\n  \n\n\n\n  \n\n\n\n\nwith base_query as (\n  \n        with identified_events AS (\n            select\n                COALESCE(\n                        \ne.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:mediaSessionId::TEXT\n,\ne.contexts_com_snowplowanalytics_mobile_screen_1[0]:id::TEXT\n,\ne.contexts_com_snowplowanalytics_snowplow_web_page_1[0]:id::TEXT\n,NULL\n                    ) as session_identifier,\n                e.*\n\n            from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_events_stg e\n\n        )\n\n        select\n            a.*\n            ,b.user_identifier -- take user_identifier from manifest. This ensures only 1 domain_userid per session.\n            \n\n        from identified_events as a\n        inner join SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_sessions_this_run as b\n        on a.session_identifier = b.session_identifier\n\n        where a.collector_tstamp <= \n\n    dateadd(\n        day,\n        3,\n        b.start_tstamp\n        )\n\n\n        \n        \n            and a.dvce_sent_tstamp <= \n\n    dateadd(\n        day,\n        3,\n        a.dvce_created_tstamp\n        )\n\n\n        \n        \n        and a.collector_tstamp >= \n        cast('2022-01-18 11:56:27.816000' as timestamp)\n    \n        and a.collector_tstamp <= \n        cast('2022-01-20 21:33:59.119000' as timestamp)\n    \n        and a.collector_tstamp >= b.start_tstamp -- deal with late loading events\n\n        \n\n        and (1=1)\n\n        qualify row_number() over (partition by a.event_id order by a.collector_tstamp, a.dvce_created_tstamp) = 1\n    \n)\n\n, prep as (\n  select\n    ev.*\n\n    \n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_web_page_1[0]:id::TEXT\n as web_page__id\n\n    \n    \n    , \nev.contexts_com_snowplowanalytics_mobile_screen_1[0]:id::TEXT\n as mobile_screen__id\n\n    \n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_client_session_1[0]:sessionId::TEXT\n as mobile_session__session_id\n\n    \n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:mediaSessionId::TEXT\n as media_session__media_session_id\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:timePlayed::numeric(28,6)\n as media_session__time_played\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:timePlayedMuted::numeric(28,6)\n as media_session__time_played_muted\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:timePaused::numeric(28,6)\n as media_session__time_paused\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:contentWatched::numeric(28,6)\n as media_session__content_watched\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:timeBuffering::numeric(28,6)\n as media_session__time_buffering\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:timeSpentAds::numeric(28,6)\n as media_session__time_spent_ads\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:ads::integer\n as media_session__ads\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:adsClicked::integer\n as media_session__ads_clicked\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:adsSkipped::integer\n as media_session__ads_skipped\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:adBreaks::integer\n as media_session__ad_breaks\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_session_1[0]:avgPlaybackRate::numeric(28,6)\n as media_session__avg_playback_rate\n\n    \n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_ad_1[0]:name::TEXT\n as media_ad__name\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_ad_1[0]:adId::TEXT\n as media_ad__ad_id\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_ad_1[0]:creativeId::TEXT\n as media_ad__creative_id\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_ad_1[0]:podPosition::integer\n as media_ad__pod_position\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_ad_1[0]:duration::integer\n as media_ad__duration\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_ad_1[0]:skippable::boolean\n as media_ad__skippable\n\n    \n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_ad_break_1[0]:name::TEXT\n as media_ad_break__name\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_ad_break_1[0]:breakId::TEXT\n as media_ad_break__break_id\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_ad_break_1[0]:breakType::TEXT\n as media_ad_break__break_type\n\n    \n    \n    , \nev.unstruct_event_com_snowplowanalytics_snowplow_media_ad_quartile_event_1:percentProgress::integer\n as ad_quartile_event__percent_progress\n\n    \n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_1[0]:duration::float\n as media_player_v1__duration\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_1[0]:currentTime::float\n as media_player_v1__current_time\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_1[0]:playbackRate::numeric(28,6)\n as media_player_v1__playback_rate\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_1[0]:muted::boolean\n as media_player_v1__muted\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_1[0]:percentProgress::integer\n as media_player_v1__percent_progress\n\n    \n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_2[0]:duration::float\n as media_player_v2__duration\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_2[0]:currentTime::float\n as media_player_v2__current_time\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_2[0]:playbackRate::numeric(28,6)\n as media_player_v2__playback_rate\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_2[0]:muted::boolean\n as media_player_v2__muted\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_2[0]:label::TEXT\n as media_player_v2__label\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_2[0]:playerType::TEXT\n as media_player_v2__player_type\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_2[0]:mediaType::TEXT\n as media_player_v2__media_type\n    \n    , \nev.contexts_com_snowplowanalytics_snowplow_media_player_2[0]:quality::TEXT\n as media_player_v2__quality\n\n    \n    \n    , \nev.unstruct_event_com_snowplowanalytics_snowplow_media_player_event_1:label::TEXT\n as media_player_event__label\n    \n    , \nev.unstruct_event_com_snowplowanalytics_snowplow_media_player_event_1:type::TEXT\n as media_player_event__type\n\n    \n    \n    , \nev.contexts_com_youtube_youtube_1[0]:playerId::TEXT\n as youtube__player_id\n    \n    , \nev.contexts_com_youtube_youtube_1[0]:url::TEXT\n as youtube__url\n    \n    , \nev.contexts_com_youtube_youtube_1[0]:playbackQuality::TEXT\n as youtube__playback_quality\n\n    \n    \n    , \nev.contexts_org_whatwg_media_element_1[0]:htmlId::TEXT\n as html5_media_element__html_id\n    \n    , \nev.contexts_org_whatwg_media_element_1[0]:currentSrc::TEXT\n as html5_media_element__current_src\n    \n    , \nev.contexts_org_whatwg_media_element_1[0]:mediaType::TEXT\n as html5_media_element__media_type\n\n    \n    \n    , \nev.contexts_org_whatwg_video_element_1[0]:videoWidth::integer\n as html5_video_element__video_width\n    \n    , \nev.contexts_org_whatwg_video_element_1[0]:videoHeight::integer\n as html5_video_element__video_height\n\n  from base_query ev\n\n  where\n    \n\n  (lower(event_name) in ('media_player_event') --filter on event_name if provided\n  or lower(event_vendor) = 'com.snowplowanalytics.snowplow.media'\n  )\n\n\n)\n\n, combined_fields as (\n  select\n    p.*\n    -- combined web and mobile properties\n    , coalesce(p.web_page__id, p.mobile_screen__id) as page_view_id\n    , coalesce(p.domain_sessionid, p.mobile_session__session_id) as original_session_identifier\n\n    --combined media properties\n    , coalesce(p.media_player_v2__label, p.media_player_event__label) as media_label\n    , round(coalesce(p.media_player_v2__duration, p.media_player_v1__duration)) as duration_secs\n    , coalesce(p.media_player_v2__current_time, p.media_player_v1__current_time) as player_current_time\n    , coalesce(p.media_player_v2__playback_rate, p.media_player_v1__playback_rate, 1.0) as playback_rate\n    , coalesce(p.media_player_v2__muted, p.media_player_v1__muted) as is_muted\n    , cast(coalesce(\n    case\n        when media_player_event__type = 'ended' then 100\n        else media_player_v1__percent_progress\n      end,\n\n    case\n        when event_name = 'end_event' then 100\n        when event_name = 'percent_progress_event' and coalesce(media_player_v2__duration, 0) > 0\n          then (\n            case\n              \n                when round(media_player_v2__current_time / media_player_v2__duration * 100) >= 100 then 100\n              \n                when round(media_player_v2__current_time / media_player_v2__duration * 100) >= 75 then 75\n              \n                when round(media_player_v2__current_time / media_player_v2__duration * 100) >= 50 then 50\n              \n                when round(media_player_v2__current_time / media_player_v2__duration * 100) >= 25 then 25\n              \n                when round(media_player_v2__current_time / media_player_v2__duration * 100) >= 10 then 10\n              \n            end\n          )\n      end,\n    cast(null as numeric(28,6))\n  ) as integer) as percent_progress\n    , coalesce(p.youtube__player_id, p.html5_media_element__html_id) as player_id\n    , coalesce(\n      media_player_v2__player_type\n        , case\n          when youtube__player_id is not null then 'com.youtube-youtube'\n          when html5_media_element__html_id is not null then 'org.whatwg-media_element'\n          else 'unknown'\n        end, cast(null as TEXT)\n    ) as media_player_type\n    , coalesce(p.youtube__url, p.html5_media_element__current_src) as source_url\n    , coalesce(\n    media_player_v2__media_type\n    , case when html5_media_element__media_type = 'audio' then 'audio' else 'video' end\n    , cast(null as TEXT)\n  ) as media_type\n    , coalesce(\n    media_player_v2__quality,\n    youtube__playback_quality,\n    html5_video_element__video_width || 'x' || html5_video_element__video_width,\n    'N/A'\n  ) as playback_quality\n    , coalesce(\n    -- for v1 media schemas, use the type property in media_player_event\n    media_player_event__type,\n    -- for v2 media schemas, the type is the event name, remove underscores to match v1 event types\n    case\n        when right(event_name, 6) = '_event'\n        then replace(\n            left(event_name, length(event_name) - 6),\n            '_',\n            ''\n        )\n        else cast(null as TEXT)\n    end\n  ) as event_type\n\n  from prep p\n)\n\nselect\n  coalesce(\n    cf.media_session__media_session_id,\n    md5(cast(coalesce(cast(cf.page_view_id as TEXT), '') || '-' || coalesce(cast(cf.player_id as TEXT), '') || '-' || coalesce(cast(cf.media_label as TEXT), '') || '-' || coalesce(cast(cf.media_type as TEXT), '') || '-' || coalesce(cast(cf.media_player_type as TEXT), '') as TEXT))\n  ) as play_id\n  , md5(cast(coalesce(cast(cf.player_id as TEXT), '') || '-' || coalesce(cast(cf.media_label as TEXT), '') || '-' || coalesce(cast(cf.media_type as TEXT), '') || '-' || coalesce(cast(cf.media_player_type as TEXT), '') as TEXT)) as media_identifier\n  , cf.*\n  , coalesce(\n    cast(round(piv.weight_rate * cf.duration_secs / 100) as integer),\n    0\n  ) as play_time_secs\n  , coalesce(\n    cast(\n      round(\n        case\n          when cf.is_muted = true then piv.weight_rate * cf.duration_secs / 100\n          else 0\n        end\n      ) as integer\n    ),\n    0\n  ) as play_time_muted_secs\n  , cf.derived_tstamp as start_tstamp\n  , dense_rank() over (partition by cf.session_identifier order by cf.derived_tstamp) AS event_in_session_index\n\nfrom combined_fields as cf\n\nleft join SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_pivot_base piv\n  on cf.percent_progress = piv.percent_progress", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_events_this_run"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.410635Z", "completed_at": "2025-07-28T10:46:57.455817Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.456990Z", "completed_at": "2025-07-28T10:46:57.457000Z"}], "thread_id": "Thread-4", "execution_time": 0.051776885986328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_base_this_run", "compiled": true, "compiled_code": "\n\n\n\nwith\n\nevents_this_run as (\n    select\n      *\n      ,row_number()\n        over (partition by media_session__media_session_id order by start_tstamp desc) as media_session_index_desc\n      ,row_number()\n        over (partition by play_id order by start_tstamp asc) as play_id_index_asc\n    from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_events_this_run\n)\n\n, prep as (\n\n  select\n    i.play_id\n    ,i.media_identifier\n    ,i.player_id\n    ,i.media_label\n    ,i.session_identifier\n    ,i.app_id\n    ,i.user_identifier\n    ,i.user_id\n    ,i.platform\n    ,i.media_type\n    ,i.media_player_type\n    ,i.page_referrer\n    ,i.page_url\n    ,i.geo_region_name\n    ,i.br_name\n    ,i.dvce_type\n    ,i.os_name\n    ,i.os_timezone\n      ,i.v_collector\n      ,v_tracker || app_id as tracker_app_id\n\n    ,max(i.source_url) as source_url\n    ,max(i.duration_secs) as duration_secs\n    ,min(start_tstamp) as start_tstamp\n    ,max(start_tstamp) as end_tstamp\n    ,sum(case when i.event_type = 'play' then 1 else 0 end) as plays\n    ,sum(case when i.event_type in ('seek', 'seeked', 'seekend') then 1 else 0 end) as seeks\n    ,sum(i.play_time_secs) as play_time_secs\n    ,sum(i.play_time_muted_secs) as play_time_muted_secs\n    ,coalesce(\n      sum(i.playback_rate * i.play_time_secs) / nullif(sum(i.play_time_secs), 0),\n      max(i.playback_rate)\n    ) as avg_playback_rate\n    ,min(case when i.event_type in ('seek', 'seeked', 'seekstart', 'seekend') then start_tstamp end) as first_seek_time\n    ,max(i.percent_progress) as max_percent_progress\n    ,\n\n  \n\n\n  listagg( distinct  i.original_session_identifier::varchar, ',') within group (order by\n\n  \n    i.original_session_identifier::varchar )\n\n as domain_sessionid_array\n\n\n  from events_this_run as i\n\n  group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\n\n)\n\n, dedupe as (\n\n  select\n    p.*\n    \n\n  from prep as p\n\n  \n    qualify row_number() over (partition by p.play_id order by p.start_tstamp) = 1\n  \n\n)\n\n, media_sessions as (\n\n  select\n    media_session__media_session_id as media_session_id,\n    media_session__time_played as media_session_time_played,\n    media_session__time_played_muted as media_session_time_played_muted,\n    media_session__time_paused as media_session_time_paused,\n    media_session__content_watched as media_session_content_watched,\n    media_session__time_buffering as media_session_time_buffering,\n    media_session__time_spent_ads as media_session_time_spent_ads,\n    media_session__ads as media_session_ads,\n    media_session__ads_clicked as media_session_ads_clicked,\n    media_session__ads_skipped as media_session_ads_skipped,\n    media_session__ad_breaks as media_session_ad_breaks,\n    media_session__avg_playback_rate as media_session_avg_playback_rate\n\n  from events_this_run\n  where media_session_index_desc = 1\n\n)\n\n, first_page_views_by_play_id as (\n\n  select\n    ev.play_id, ev.page_view_id\n\n  from events_this_run as ev\n  where play_id_index_asc = 1\n\n)\n\n, page_view_id_aggregation as (\n\n  select\n    i.play_id\n    ,\n\n  \n\n\n  listagg( distinct  i.page_view_id::varchar, ',') within group (order by\n\n  \n    i.page_view_id::varchar )\n\n as page_view_id_array\n\n  from events_this_run as i\n  group by 1\n\n)\n\n--- The following CTEs create a distinct list of percent_progress values for each play_id. We first need to select distinct percent_progress, because get_string_agg can't get distinct values with numeric ordering.\n, distinct_percent_progress as (\n  select distinct ev.play_id, ev.percent_progress\n  from events_this_run as ev\n  where ev.percent_progress is not null\n)\n, percent_progress_by_play_id as (\n  select\n    i.play_id,\n    \n\n  \n\n\n  listagg( i.percent_progress::varchar, ',') within group (order by\n\n  to_numeric(i.percent_progress, 38, 9) \n\n  )\n\n as percent_progress_reached\n  from distinct_percent_progress as i\n  group by 1\n)\n\n, retention_rate as (\n\n  select\n    d.play_id,\n    max(i.percent_progress) as retention_rate\n\n  from dedupe as d\n\n  inner join events_this_run as i\n    on i.play_id = d.play_id\n\n  where\n    i.percent_progress is not null\n    and (i.start_tstamp <= d.first_seek_time or d.first_seek_time is null)\n\n  group by 1\n\n)\n\n-- for correcting NULLs in case of 'ready' events only where the metadata showing the duration_secs is usually missing as the event fires before it has time to load\n, duration_fix as (\n\n  select\n    f.media_identifier,\n    max(f.duration_secs) as duration_secs\n\n  from events_this_run as f\n\n  group by 1\n\n)\n\n\n\nselect\n  d.play_id,\n  pv.page_view_id,\n  pva.page_view_id_array,\n  d.media_identifier,\n  d.player_id,\n  d.media_label,\n  d.session_identifier,\n  d.app_id,\n  d.domain_sessionid_array,\n  d.user_identifier,\n  d.user_id,\n  d.page_referrer,\n  d.page_url,\n  d.source_url,\n  d.geo_region_name,\n  d.br_name,\n  d.dvce_type,\n  d.os_name,\n  d.os_timezone,\n  d.platform,\n\n  -- media information\n  f.duration_secs,\n  d.media_type,\n  d.media_player_type,\n\n  -- playback information\n  d.start_tstamp,\n  d.end_tstamp,\n  coalesce(\n    s.media_session_avg_playback_rate,\n    cast(d.avg_playback_rate as float)\n  ) as avg_playback_rate,\n\n  -- time spent\n  coalesce(s.media_session_time_played, d.play_time_secs) as play_time_secs,\n  coalesce(s.media_session_time_played_muted, d.play_time_muted_secs) as play_time_muted_secs,\n  s.media_session_time_paused as paused_time_secs,\n  s.media_session_time_buffering as buffering_time_secs,\n  s.media_session_time_spent_ads as ads_time_secs,\n\n  -- event counts\n  d.seeks,\n  s.media_session_ads as ads,\n  s.media_session_ads_clicked as ads_clicked,\n  s.media_session_ads_skipped as ads_skipped,\n  s.media_session_ad_breaks as ad_breaks,\n\n  -- playback progress\n  d.plays > 0 as is_played,\n  case\n    when coalesce(s.media_session_time_played, d.play_time_secs) > 30 then true else\n      false\n  end as is_valid_play,\n  case\n    when\n      coalesce(s.media_session_content_watched, d.play_time_secs) / nullif(f.duration_secs, 0)\n      >= 0.99\n      then true else\n      false\n  end as is_complete_play,\n  cast(coalesce(case\n    when r.retention_rate > d.max_percent_progress\n      then d.max_percent_progress / cast(100 as float)\n    else r.retention_rate / cast(100 as float)\n  -- to correct incorrect result due to duplicate session_identifier (one removed)\n  end, 0) as float) as retention_rate,\n  p.percent_progress_reached,\n  s.media_session_content_watched as content_watched_secs,\n  case\n    when d.duration_secs is not null and s.media_session_content_watched is not null and d.duration_secs > 0\n    then least(\n      s.media_session_content_watched / d.duration_secs,\n      1.0\n    )\n  end as content_watched_percent\n\n  \n\n  -- passthrough fields\n      , d.v_collector\n      , d.tracker_app_id\n\nfrom dedupe as d\n\nleft join retention_rate as r\n  on r.play_id = d.play_id\n\nleft join duration_fix as f\n  on f.media_identifier = d.media_identifier\n\nleft join media_sessions as s\n  on s.media_session_id = d.play_id\n\nleft join percent_progress_by_play_id as p\n  on p.play_id = d.play_id\n\nleft join first_page_views_by_play_id as pv\n  on pv.play_id = d.play_id\n\nleft join page_view_id_aggregation as pva\n  on pva.play_id = d.play_id\n\n", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_this_run"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.428404Z", "completed_at": "2025-07-28T10:46:57.457976Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.459375Z", "completed_at": "2025-07-28T10:46:57.459383Z"}], "thread_id": "Thread-1", "execution_time": 0.052190303802490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_media_ad_views_this_run", "compiled": true, "compiled_code": "\n\n\n\nwith\n\nevents_this_run as (\n\n  select * from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_events_this_run\n  where media_ad__ad_id is not null and media_identifier is not null\n\n)\n\n, prep as (\n\n  select\n    md5(cast(coalesce(cast(ev.platform as TEXT), '') || '-' || coalesce(cast(ev.media_identifier as TEXT), '') || '-' || coalesce(cast(ev.media_ad__ad_id as TEXT), '') as TEXT)) as media_ad_id\n\n    ,ev.platform\n    ,ev.media_identifier\n    ,ev.user_identifier\n    ,ev.session_identifier\n    ,ev.app_id \n    ,ev.play_id\n    ,ev.media_ad_break__break_id as ad_break_id\n    ,ev.media_ad__ad_id as ad_id\n        ,ev.v_collector\n        ,v_tracker || app_id as tracker_app_id\n    \n    ,max(ev.user_id) as user_id\n    ,max(ev.media_label) as media_label\n    ,max(ev.media_ad_break__name) as ad_break_name\n    ,max(ev.media_ad_break__break_type) as ad_break_type\n\n    ,max(ev.media_ad__name) as name\n    ,max(ev.media_ad__creative_id) as creative_id\n    ,max(ev.media_ad__duration) as duration_secs\n    ,avg(ev.media_ad__pod_position) as pod_position\n    ,sum(case when ev.media_ad__skippable then 1 else 0 end) > 0 as skippable\n\n    ,max(case when ev.event_type = 'adclick' then 1 else 0 end) > 0 as clicked\n    ,max(case when ev.event_type = 'adskip' then 1 else 0 end) > 0 as skipped\n    ,max(case when ev.event_type = 'adcomplete' or (ev.event_type = 'adquartile' and ev.ad_quartile_event__percent_progress >= 25) then 1 else 0 end) > 0 as percent_reached_25\n    ,max(case when ev.event_type = 'adcomplete' or (ev.event_type = 'adquartile' and ev.ad_quartile_event__percent_progress >= 50) then 1 else 0 end) > 0 as percent_reached_50\n    ,max(case when ev.event_type = 'adcomplete' or (ev.event_type = 'adquartile' and ev.ad_quartile_event__percent_progress >= 75) then 1 else 0 end) > 0 as percent_reached_75\n    ,max(case when ev.event_type = 'adcomplete' then 1 else 0 end) > 0 as percent_reached_100\n\n    ,min(ev.start_tstamp) as viewed_at\n    ,max(ev.start_tstamp) as last_event\n    ,\n\n  \n\n\n  listagg( distinct  ev.original_session_identifier::varchar, ',') within group (order by\n\n  \n    ev.original_session_identifier::varchar )\n\n as domain_sessionid_array\n\n  from events_this_run as ev\n  group by 1,2,3,4,5,6,7,8,9,10,11\n\n\n)\n\nselect\n  md5(cast(coalesce(cast(p.play_id as TEXT), '') || '-' || coalesce(cast(p.ad_break_id as TEXT), '') || '-' || coalesce(cast(p.media_ad_id as TEXT), '') as TEXT)) as media_ad_view_id\n  ,p.media_ad_id\n  ,p.platform\n  ,p.media_identifier\n  ,p.media_label\n  ,p.user_identifier\n  ,p.session_identifier\n  ,p.app_id\n  ,p.domain_sessionid_array\n  ,p.user_id\n  ,p.play_id\n  ,p.ad_break_id\n  ,p.ad_break_name\n  ,p.ad_break_type\n  ,p.ad_id\n  ,p.name\n  ,p.creative_id\n  ,p.duration_secs\n  ,p.pod_position\n  ,p.skippable\n  ,p.clicked\n  ,p.skipped\n  ,p.percent_reached_25\n  ,p.percent_reached_50\n  ,p.percent_reached_75\n  ,p.percent_reached_100\n  ,p.viewed_at\n  ,p.last_event\n  \n  -- passthrough fields\n      , p.v_collector\n      , p.tracker_app_id\n\nfrom prep as p", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_media_ad_views_this_run"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.433544Z", "completed_at": "2025-07-28T10:46:57.460376Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.463134Z", "completed_at": "2025-07-28T10:46:57.463141Z"}], "thread_id": "Thread-3", "execution_time": 0.05469036102294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.snowplow_media_player.snowplow_media_player-on-run-end-0", "compiled": true, "compiled_code": "\n\n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.450699Z", "completed_at": "2025-07-28T10:46:57.461662Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.464944Z", "completed_at": "2025-07-28T10:46:57.464952Z"}], "thread_id": "Thread-2", "execution_time": 0.05569887161254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.dbt_utils_expression_is_true_snowplow_media_player_base_events_this_run_duration_secs___0.6afedaaef3", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_events_this_run\n\nwhere not(duration_secs > 0)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.467318Z", "completed_at": "2025-07-28T10:46:57.481187Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.487662Z", "completed_at": "2025-07-28T10:46:57.487701Z"}], "thread_id": "Thread-4", "execution_time": 0.026804685592651367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_base_events_this_run_event_id.38b127e06f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_events_this_run\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.475928Z", "completed_at": "2025-07-28T10:46:57.496262Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.498527Z", "completed_at": "2025-07-28T10:46:57.498534Z"}], "thread_id": "Thread-1", "execution_time": 0.03277420997619629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_base_events_this_run_event_id.ba9cc8d8f4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_events_this_run\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.491459Z", "completed_at": "2025-07-28T10:46:57.500814Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.503471Z", "completed_at": "2025-07-28T10:46:57.503483Z"}], "thread_id": "Thread-2", "execution_time": 0.0284271240234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_base_this_run_play_id.e59aaaef71", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect play_id\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_this_run\nwhere play_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.506571Z", "completed_at": "2025-07-28T10:46:57.519089Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.524113Z", "completed_at": "2025-07-28T10:46:57.524123Z"}], "thread_id": "Thread-4", "execution_time": 0.024749755859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_base_this_run_play_id.1480904280", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    play_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_this_run\nwhere play_id is not null\ngroup by play_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.534217Z", "completed_at": "2025-07-28T10:46:57.540974Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.541953Z", "completed_at": "2025-07-28T10:46:57.541962Z"}], "thread_id": "Thread-4", "execution_time": 0.009896039962768555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_media_ad_views_this_run_media_ad_view_id.a9eace593f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_ad_view_id\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_media_ad_views_this_run\nwhere media_ad_view_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.525814Z", "completed_at": "2025-07-28T10:46:57.544176Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.545475Z", "completed_at": "2025-07-28T10:46:57.545481Z"}], "thread_id": "Thread-2", "execution_time": 0.0323176383972168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_media_ad_views_this_run_media_ad_id.edb5064c8f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_ad_id\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_media_ad_views_this_run\nwhere media_ad_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.546400Z", "completed_at": "2025-07-28T10:46:57.559878Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.560572Z", "completed_at": "2025-07-28T10:46:57.560579Z"}], "thread_id": "Thread-4", "execution_time": 0.017175674438476562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_media_ad_views_this_run_viewed_at.87c90dc2f8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viewed_at\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_media_ad_views_this_run\nwhere viewed_at is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.553924Z", "completed_at": "2025-07-28T10:46:57.561621Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:57.562219Z", "completed_at": "2025-07-28T10:46:57.562226Z"}], "thread_id": "Thread-2", "execution_time": 0.010064363479614258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_media_ad_views_this_run_media_ad_view_id.5b0eafbf70", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    media_ad_view_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_media_ad_views_this_run\nwhere media_ad_view_id is not null\ngroup by media_ad_view_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.513980Z", "completed_at": "2025-07-28T10:46:58.166802Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.167437Z", "completed_at": "2025-07-28T10:46:58.167449Z"}], "thread_id": "Thread-1", "execution_time": 0.8976716995239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_media_ad_views", "compiled": true, "compiled_code": "\n\n\n\nselect *\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_media_ad_views_this_run\n\n--returns false if run doesn't contain new events.\nwhere cast(True as boolean)", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ad_views"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:57.482517Z", "completed_at": "2025-07-28T10:46:58.175797Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.176403Z", "completed_at": "2025-07-28T10:46:58.176410Z"}], "thread_id": "Thread-3", "execution_time": 0.933056116104126, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_base", "compiled": true, "compiled_code": "\n\n\n\nselect *\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_base_this_run\n\n--returns false if run doesn't contain new events.\nwhere cast(True as boolean)", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_base"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.430914Z", "completed_at": "2025-07-28T10:46:58.442540Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.443217Z", "completed_at": "2025-07-28T10:46:58.443225Z"}], "thread_id": "Thread-1", "execution_time": 0.033453941345214844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_media_ad_views_media_ad_id.0bb6c8c818", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_ad_id\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ad_views\nwhere media_ad_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.412065Z", "completed_at": "2025-07-28T10:46:58.444107Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.446960Z", "completed_at": "2025-07-28T10:46:58.446967Z"}], "thread_id": "Thread-4", "execution_time": 0.041075944900512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_media_ads", "compiled": true, "compiled_code": "\n\n\n\nwith\n\nnew_media_ad_views as (\n\n  select *\n\n  from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ad_views a\n\n  \n    where -- enough time has passed since the page_view's start_tstamp to be able to process it as a whole (please bear in mind the late arriving data)\n    cast(\n\n    dateadd(\n        hour,\n        10,\n        a.viewed_at\n        )\n\n as timestamp) < \n    convert_timezone('UTC', convert_timezone('UTC', current_timestamp()))::timestamp\n\n    -- and it has not been processed yet\n    and (\n      not exists(select 1 from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ads) or -- no records in the table\n      a.viewed_at > ( select max(last_view) from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ads )\n    )\n  \n\n)\n\n, new_data as (\n\n  select\n    a.media_ad_id,\n\n    a.platform,\n    a.media_identifier,\n    max(a.media_label) as media_label,\n\n    a.ad_id as ad_id,\n    max(a.name) as name,\n    max(a.creative_id) as creative_id,\n    max(a.duration_secs) as duration_secs,\n    sum(case when a.skippable then 1 else 0 end) > 0 as skippable,\n    avg(a.pod_position) as pod_position,\n\n    count(*) as views,\n    sum(case when a.clicked then 1 else 0 end) as clicked,\n    sum(case when a.skipped then 1 else 0 end) as skipped,\n    sum(case when a.percent_reached_25 then 1 else 0 end) as percent_reached_25,\n    sum(case when a.percent_reached_50 then 1 else 0 end) as percent_reached_50,\n    sum(case when a.percent_reached_75 then 1 else 0 end) as percent_reached_75,\n    sum(case when a.percent_reached_100 then 1 else 0 end) as percent_reached_100,\n\n    \n      0 as views_unique,\n      0 as clicked_unique,\n      0 as skipped_unique,\n      0 as percent_reached_25_unique,\n      0 as percent_reached_50_unique,\n      0 as percent_reached_75_unique,\n      0 as percent_reached_100_unique,\n    \n\n    min(viewed_at) as first_view,\n    max(viewed_at) as last_view\n\n  from new_media_ad_views a\n\n  group by 1, 2, 3, 5\n\n)\n\n\n\n, unique_counts_that_exist_in_new_data as (\n\n  select\n    a.media_ad_id,\n    count(distinct a.user_identifier) as views_unique,\n    count(distinct case when a.clicked then a.user_identifier end) as clicked_unique,\n    count(distinct case when a.skipped then a.user_identifier end) as skipped_unique,\n    count(distinct case when a.percent_reached_25 then user_identifier end) as percent_reached_25_unique,\n    count(distinct case when a.percent_reached_50 then user_identifier end) as percent_reached_50_unique,\n    count(distinct case when a.percent_reached_75 then user_identifier end) as percent_reached_75_unique,\n    count(distinct case when a.percent_reached_100 then user_identifier end) as percent_reached_100_unique\n\n  from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ad_views a\n\n  where\n    -- enough time has passed since the page_view's start_tstamp to be able to process it as a whole (please bear in mind the late arriving data)\n    cast(\n\n    dateadd(\n        hour,\n        10,\n        a.viewed_at\n        )\n\n as timestamp) < \n    convert_timezone('UTC', convert_timezone('UTC', current_timestamp()))::timestamp\n\n\n    -- exists in the new data\n    and exists(select 1 from new_media_ad_views as b where b.media_ad_id = a.media_ad_id)\n\n  group by 1\n\n)\n\n, all_data as (\n\n  select * from new_data\n  union all\n  select * \n  from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ads\n\n)\n\n, all_data_grouped as (\n\n  select\n    a.media_ad_id,\n\n    a.platform,\n    a.media_identifier,\n    max(a.media_label) as media_label,\n\n    a.ad_id as ad_id,\n    max(a.name) as name,\n    max(a.creative_id) as creative_id,\n    max(a.duration_secs) as duration_secs,\n    sum(case when a.skippable then 1 else 0 end) > 0 as skippable,\n    sum(a.pod_position * a.views) / sum(a.views) as pod_position,\n\n    sum(a.views) as views,\n    sum(a.clicked) as clicked,\n    sum(a.skipped) as skipped,\n    sum(a.percent_reached_25) as percent_reached_25,\n    sum(a.percent_reached_50) as percent_reached_50,\n    sum(a.percent_reached_75) as percent_reached_75,\n    sum(a.percent_reached_100) as percent_reached_100,\n\n    sum(a.views_unique) as views_unique,\n    sum(a.clicked_unique) as clicked_unique,\n    sum(a.skipped_unique) as skipped_unique,\n    sum(a.percent_reached_25_unique) as percent_reached_25_unique,\n    sum(a.percent_reached_50_unique) as percent_reached_50_unique,\n    sum(a.percent_reached_75_unique) as percent_reached_75_unique,\n    sum(a.percent_reached_100_unique) as percent_reached_100_unique,\n\n    min(a.first_view) as first_view,\n    max(a.last_view) as last_view\n\n  from all_data a\n\n  group by 1, 2, 3, 5\n\n)\n\n, prep as (\n\n  select\n    a.media_ad_id,\n\n    a.platform,\n    a.media_identifier,\n    a.media_label,\n\n    a.ad_id,\n    a.name,\n    a.creative_id,\n    a.duration_secs,\n    a.skippable,\n    a.pod_position,\n\n    a.views,\n    a.clicked,\n    a.skipped,\n    a.percent_reached_25 as percent_reached_25,\n    a.percent_reached_50 as percent_reached_50,\n    a.percent_reached_75 as percent_reached_75,\n    a.percent_reached_100,\n\n    coalesce(b.views_unique, a.views_unique) as views_unique,\n    coalesce(b.clicked_unique, a.clicked_unique) as clicked_unique,\n    coalesce(b.skipped_unique, a.skipped_unique) as skipped_unique,\n    coalesce(b.percent_reached_25_unique, a.percent_reached_25_unique) as percent_reached_25_unique,\n    coalesce(b.percent_reached_50_unique, a.percent_reached_50_unique) as percent_reached_50_unique,\n    coalesce(b.percent_reached_75_unique, a.percent_reached_75_unique) as percent_reached_75_unique,\n    coalesce(b.percent_reached_100_unique, a.percent_reached_100_unique) as percent_reached_100_unique,\n\n    a.first_view,\n    a.last_view\n\n  from all_data_grouped a\n\n  left join unique_counts_that_exist_in_new_data b\n    on a.media_ad_id = b.media_ad_id\n)\n\n\n\nselect *\n  \n\n  from prep", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ads"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.426857Z", "completed_at": "2025-07-28T10:46:58.446216Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.448884Z", "completed_at": "2025-07-28T10:46:58.448894Z"}], "thread_id": "Thread-2", "execution_time": 0.04040098190307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player_integration_tests.snowplow_media_player_media_ad_views_actual", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ad_views", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ad_views_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.437339Z", "completed_at": "2025-07-28T10:46:58.449768Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.452525Z", "completed_at": "2025-07-28T10:46:58.452533Z"}], "thread_id": "Thread-3", "execution_time": 0.039142608642578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_media_ad_views_media_ad_view_id.60e5a15bab", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_ad_view_id\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ad_views\nwhere media_ad_view_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.454286Z", "completed_at": "2025-07-28T10:46:58.462568Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.488320Z", "completed_at": "2025-07-28T10:46:58.488331Z"}], "thread_id": "Thread-1", "execution_time": 0.0402989387512207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_media_ad_views_viewed_at.d5a84e2e6d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect viewed_at\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ad_views\nwhere viewed_at is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.463173Z", "completed_at": "2025-07-28T10:46:58.504436Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.507322Z", "completed_at": "2025-07-28T10:46:58.507330Z"}], "thread_id": "Thread-4", "execution_time": 0.053894996643066406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_media_ad_views_media_ad_view_id.5ff02544e4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    media_ad_view_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ad_views\nwhere media_ad_view_id is not null\ngroup by media_ad_view_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.498586Z", "completed_at": "2025-07-28T10:46:58.511231Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.523463Z", "completed_at": "2025-07-28T10:46:58.523471Z"}], "thread_id": "Thread-3", "execution_time": 0.06163477897644043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_plays_by_pageview", "compiled": true, "compiled_code": "\n\n\n\nselect *\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_base\n\nwhere is_played", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_plays_by_pageview"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.513001Z", "completed_at": "2025-07-28T10:46:58.531350Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.541620Z", "completed_at": "2025-07-28T10:46:58.541630Z"}], "thread_id": "Thread-1", "execution_time": 0.03513765335083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_session_stats", "compiled": true, "compiled_code": "\n\n\n\nwith prep as (\n\n  select\n    -- get the first domain_sessionid in the array\n    \n      cast((\n    split(b.domain_sessionid_array, ',')\n)[0] as TEXT) as domain_sessionid,\n    \n    user_identifier,\n    count(*) as impressions,\n    count(distinct case when media_type = 'video' and is_played then media_identifier end) as videos_played,\n    count(distinct case when media_type = 'audio' and is_played then media_identifier end) as audio_played,\n    sum(case when media_type = 'video' and is_played then 1 else 0 end) as video_plays,\n    sum(case when media_type = 'audio' and is_played then 1 else 0 end) as audio_plays,\n    sum(case when media_type = 'video' and is_valid_play then 1 else 0 end) as valid_video_plays,\n    sum(case when media_type = 'audio' and is_valid_play then 1 else 0 end) as valid_audio_plays,\n    min(start_tstamp) start_tstamp,\n    max(end_tstamp) as end_tstamp,\n    sum(seeks) as seeks,\n    sum(play_time_secs / cast(60 as float)) as play_time_mins,\n    sum(play_time_muted_secs / cast(60 as float)) as play_time_muted_mins,\n    coalesce(avg(case when is_played then play_time_secs / cast(60 as float) end), 0) as avg_play_time_mins,\n    coalesce(avg(case when is_played then coalesce(play_time_secs / nullif(duration_secs, 0), 0) end),0) as avg_percent_played,\n    sum(case when is_complete_play then 1 else 0 end) as complete_plays\n\n  from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_base as b\n\n  group by 1,2\n\n)\n\nselect *\n\n\n\nfrom prep", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_session_stats"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.561138Z", "completed_at": "2025-07-28T10:46:58.568304Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.569229Z", "completed_at": "2025-07-28T10:46:58.569237Z"}], "thread_id": "Thread-1", "execution_time": 0.013589859008789062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_base_play_id.75c3e8e087", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect play_id\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_base\nwhere play_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.572068Z", "completed_at": "2025-07-28T10:46:58.576756Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.577327Z", "completed_at": "2025-07-28T10:46:58.577334Z"}], "thread_id": "Thread-1", "execution_time": 0.006648063659667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_base_play_id.42806fdcfc", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    play_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_base\nwhere play_id is not null\ngroup by play_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.580009Z", "completed_at": "2025-07-28T10:46:58.584051Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.584636Z", "completed_at": "2025-07-28T10:46:58.584644Z"}], "thread_id": "Thread-1", "execution_time": 0.00590062141418457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player_integration_tests.snowplow_media_player_media_ads_actual", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ads", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ads_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.587246Z", "completed_at": "2025-07-28T10:46:58.592860Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.593441Z", "completed_at": "2025-07-28T10:46:58.593448Z"}], "thread_id": "Thread-1", "execution_time": 0.007439613342285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_media_ads_media_ad_id.faa5647164", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_ad_id\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ads\nwhere media_ad_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.596123Z", "completed_at": "2025-07-28T10:46:58.600664Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.601240Z", "completed_at": "2025-07-28T10:46:58.601247Z"}], "thread_id": "Thread-1", "execution_time": 0.006361484527587891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_media_ads_media_ad_id.548290ee2b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    media_ad_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_ads\nwhere media_ad_id is not null\ngroup by media_ad_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.603957Z", "completed_at": "2025-07-28T10:46:58.609720Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.610437Z", "completed_at": "2025-07-28T10:46:58.610447Z"}], "thread_id": "Thread-1", "execution_time": 0.0078084468841552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player_integration_tests.dbt_utils_equal_rowcount_snowplow_media_player_media_ad_views_actual_ref_snowplow_media_player_media_ad_views_expected_stg_.ebfe86a8e5", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ad_views_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ad_views_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.613529Z", "completed_at": "2025-07-28T10:46:58.624219Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.625273Z", "completed_at": "2025-07-28T10:46:58.625283Z"}], "thread_id": "Thread-1", "execution_time": 0.013252973556518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player_integration_tests.dbt_utils_equality_snowplow_media_player_media_ad_views_actual_media_ad_view_id__media_ad_id__platform__media_identifier__media_label__user_identifier__session_identifier__domain_sessionid_array__user_id__play_id__ad_break_id__ad_break_name__ad_break_type__ad_id__name__creative_id__duration_secs__pod_position__skippable__clicked__skipped__percent_reached_25__percent_reached_50__percent_reached_75__percent_reached_100__ref_snowplow_media_player_media_ad_views_expected_stg_.19c60748c4", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ad_views_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ad_views_expected_stg\n\n),\n\na_minus_b as (\n\n    select media_ad_view_id, media_ad_id, platform, media_identifier, media_label, user_identifier, session_identifier, domain_sessionid_array, user_id, play_id, ad_break_id, ad_break_name, ad_break_type, ad_id, name, creative_id, duration_secs, pod_position, skippable, clicked, skipped, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100 from a\n    \n\n    except\n\n\n    select media_ad_view_id, media_ad_id, platform, media_identifier, media_label, user_identifier, session_identifier, domain_sessionid_array, user_id, play_id, ad_break_id, ad_break_name, ad_break_type, ad_id, name, creative_id, duration_secs, pod_position, skippable, clicked, skipped, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100 from b\n\n),\n\nb_minus_a as (\n\n    select media_ad_view_id, media_ad_id, platform, media_identifier, media_label, user_identifier, session_identifier, domain_sessionid_array, user_id, play_id, ad_break_id, ad_break_name, ad_break_type, ad_id, name, creative_id, duration_secs, pod_position, skippable, clicked, skipped, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100 from b\n    \n\n    except\n\n\n    select media_ad_view_id, media_ad_id, platform, media_identifier, media_label, user_identifier, session_identifier, domain_sessionid_array, user_id, play_id, ad_break_id, ad_break_name, ad_break_type, ad_id, name, creative_id, duration_secs, pod_position, skippable, clicked, skipped, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100 from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.630050Z", "completed_at": "2025-07-28T10:46:58.637072Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.637650Z", "completed_at": "2025-07-28T10:46:58.637657Z"}], "thread_id": "Thread-1", "execution_time": 0.009882926940917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_plays_by_pageview_play_id.f9c8ecdb6d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect play_id\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_plays_by_pageview\nwhere play_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.640475Z", "completed_at": "2025-07-28T10:46:58.645010Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.645560Z", "completed_at": "2025-07-28T10:46:58.645567Z"}], "thread_id": "Thread-1", "execution_time": 0.006371259689331055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_plays_by_pageview_play_id.f38ea98226", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    play_id as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_plays_by_pageview\nwhere play_id is not null\ngroup by play_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.648299Z", "completed_at": "2025-07-28T10:46:58.655316Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.655970Z", "completed_at": "2025-07-28T10:46:58.655978Z"}], "thread_id": "Thread-1", "execution_time": 0.008944511413574219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_user_stats", "compiled": true, "compiled_code": "\n\n\n\nwith prep as (\n\n  select\n    user_identifier,\n    min(case when (video_plays + audio_plays) > 0 then start_tstamp end) as first_play,\n    max(case when (video_plays + audio_plays) > 0 then start_tstamp end) as last_play,\n    sum(video_plays) as video_plays,\n    sum(audio_plays) as audio_plays,\n    sum(valid_video_plays) as valid_video_plays,\n    sum(valid_audio_plays) as valid_audio_plays,\n    sum(complete_plays) as complete_plays,\n    sum(seeks) as seeks,\n    cast(sum(play_time_mins) as integer) as play_time_mins,\n    -- using session and not page_view as the base for average to save cost by not joining on snowplow_media_player_base for calculating on individual page_view level average\n    coalesce(cast(avg(case when (video_plays + audio_plays) > 0 then avg_play_time_mins end) as integer), 0) as avg_session_play_time_mins,\n    coalesce(avg(avg_percent_played),0) as avg_percent_played\n\n  from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_session_stats\n\n  group by 1\n\n)\n\nselect *\n\n\n\nfrom prep", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_user_stats"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.659042Z", "completed_at": "2025-07-28T10:46:58.664361Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.665389Z", "completed_at": "2025-07-28T10:46:58.665399Z"}], "thread_id": "Thread-1", "execution_time": 0.00774073600769043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_session_stats_domain_sessionid.8ff2e43950", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect domain_sessionid\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_session_stats\nwhere domain_sessionid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.670054Z", "completed_at": "2025-07-28T10:46:58.677335Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.677995Z", "completed_at": "2025-07-28T10:46:58.678003Z"}], "thread_id": "Thread-1", "execution_time": 0.01012420654296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_session_stats_domain_sessionid.5650684a8b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    domain_sessionid as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_session_stats\nwhere domain_sessionid is not null\ngroup by domain_sessionid\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.680750Z", "completed_at": "2025-07-28T10:46:58.687390Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.687997Z", "completed_at": "2025-07-28T10:46:58.688004Z"}], "thread_id": "Thread-1", "execution_time": 0.008591413497924805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player_integration_tests.dbt_utils_equal_rowcount_snowplow_media_player_media_ads_actual_ref_snowplow_media_player_media_ads_expected_stg_.566c98dcbe", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ads_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ads_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.690832Z", "completed_at": "2025-07-28T10:46:58.696800Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.697393Z", "completed_at": "2025-07-28T10:46:58.697400Z"}], "thread_id": "Thread-1", "execution_time": 0.007970094680786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player_integration_tests.dbt_utils_equality_snowplow_media_player_media_ads_actual_media_ad_id__platform__media_identifier__media_label__ad_id__name__creative_id__duration_secs__skippable__pod_position__views__clicked__skipped__percent_reached_25__percent_reached_50__percent_reached_75__percent_reached_100__views_unique__clicked_unique__skipped_unique__percent_reached_25_unique__percent_reached_50_unique__percent_reached_75_unique__percent_reached_100_unique__ref_snowplow_media_player_media_ads_expected_stg_.2e58b58d54", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ads_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_ads_expected_stg\n\n),\n\na_minus_b as (\n\n    select media_ad_id, platform, media_identifier, media_label, ad_id, name, creative_id, duration_secs, skippable, pod_position, views, clicked, skipped, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100, views_unique, clicked_unique, skipped_unique, percent_reached_25_unique, percent_reached_50_unique, percent_reached_75_unique, percent_reached_100_unique from a\n    \n\n    except\n\n\n    select media_ad_id, platform, media_identifier, media_label, ad_id, name, creative_id, duration_secs, skippable, pod_position, views, clicked, skipped, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100, views_unique, clicked_unique, skipped_unique, percent_reached_25_unique, percent_reached_50_unique, percent_reached_75_unique, percent_reached_100_unique from b\n\n),\n\nb_minus_a as (\n\n    select media_ad_id, platform, media_identifier, media_label, ad_id, name, creative_id, duration_secs, skippable, pod_position, views, clicked, skipped, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100, views_unique, clicked_unique, skipped_unique, percent_reached_25_unique, percent_reached_50_unique, percent_reached_75_unique, percent_reached_100_unique from b\n    \n\n    except\n\n\n    select media_ad_id, platform, media_identifier, media_label, ad_id, name, creative_id, duration_secs, skippable, pod_position, views, clicked, skipped, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100, views_unique, clicked_unique, skipped_unique, percent_reached_25_unique, percent_reached_50_unique, percent_reached_75_unique, percent_reached_100_unique from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.700095Z", "completed_at": "2025-07-28T10:46:58.704703Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.705268Z", "completed_at": "2025-07-28T10:46:58.705275Z"}], "thread_id": "Thread-1", "execution_time": 0.006460428237915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_user_stats_user_identifier.84eb400dbf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_identifier\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_user_stats\nwhere user_identifier is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.707932Z", "completed_at": "2025-07-28T10:46:58.712536Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:58.713110Z", "completed_at": "2025-07-28T10:46:58.713117Z"}], "thread_id": "Thread-1", "execution_time": 0.006464481353759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_user_stats_user_identifier.feed62d39e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_identifier as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_scratch.snowplow_media_player_user_stats\nwhere user_identifier is not null\ngroup by user_identifier\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.467878Z", "completed_at": "2025-07-28T10:46:59.135227Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:59.135865Z", "completed_at": "2025-07-28T10:46:59.135876Z"}], "thread_id": "Thread-2", "execution_time": 0.8908865451812744, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player.snowplow_media_player_media_stats", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith new_data as (\n\n  select\n    p.media_identifier,\n    p.player_id,\n    p.media_label,\n    max(p.duration_secs) as duration_secs,\n    p.media_type,\n    p.media_player_type,\n    min(case when is_played then p.start_tstamp end) as first_play,\n    max(case when is_played then p.start_tstamp end) as last_play,\n    sum(p.play_time_secs) as play_time_secs,\n    sum(case when is_played then 1 else 0 end) as plays,\n    sum(case when is_valid_play then 1 else 0 end) as valid_plays,\n    sum(case when p.is_complete_play then 1 else 0 end) as complete_plays,\n    count(distinct p.play_id) as impressions,\n    avg(case when is_played then coalesce(p.content_watched_secs, p.play_time_secs, 0) / nullif(p.duration_secs, 0) end) as avg_percent_played,\n    avg(case when is_played then p.retention_rate end) as avg_retention_rate,\n    avg(case when is_played then p.avg_playback_rate end) as avg_playback_rate,\n    avg(case when is_played then p.content_watched_secs end) as avg_content_watched_sec,\n    max(start_tstamp) as last_base_tstamp\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_base p\n\nwhere -- enough time has passed since the page_view's start_tstamp to be able to process it as a whole (please bear in mind the late arriving data)\ncast(\n\n    dateadd(\n        hour,\n        10,\n        p.end_tstamp \n        )\n\n as timestamp) < \n    convert_timezone('UTC', convert_timezone('UTC', current_timestamp()))::timestamp\n\n-- and it has not been processed yet\nand (\n  not exists(select 1 from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_stats) or -- no records in the table\n  p.start_tstamp > ( select max(last_base_tstamp) from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_stats )\n)\n\ngroup by 1,2,3,5,6\n\n)\n\n, prep as (\n\n  select\n    n.media_identifier,\n    n.player_id,\n    n.media_label,\n    greatest(n.duration_secs, coalesce(t.duration_secs, 0)) as duration_secs,\n    n.media_type,\n    n.media_player_type,\n    n.last_base_tstamp,\n    nullif(\n      least(n.first_play, coalesce(t.first_play, cast('2999-01-01 00:00:00' as timestamp))),\n      cast('2999-01-01 00:00:00' as timestamp)\n    ) as first_play,\n    nullif(\n      greatest(n.last_play, coalesce(t.last_play, cast('2000-01-01 00:00:00' as timestamp))),\n      cast('2000-01-01 00:00:00' as timestamp)\n    ) as last_play,\n    n.play_time_secs / cast(60 as float) + coalesce(t.play_time_mins, 0) as play_time_mins,\n    (n.play_time_secs / cast(60 as float) + coalesce(t.play_time_mins, 0))  / nullif((n.plays + coalesce(t.plays, 0)), 0) as avg_play_time_mins,\n    n.plays + coalesce(t.plays, 0) as plays,\n    n.valid_plays + coalesce(t.valid_plays, 0) as valid_plays,\n    n.complete_plays + coalesce(t.complete_plays, 0) as complete_plays,\n    n.impressions + coalesce(t.impressions, 0)  as impressions,\n    -- weighted average calculations\n    (n.avg_percent_played * n.plays / nullif((n.plays + coalesce(t.plays, 0)),0)) + (coalesce(t.avg_percent_played, 0) * coalesce(t.plays, 0) / nullif((n.plays + coalesce(t.plays, 0)), 0)) as avg_percent_played,\n    (n.avg_retention_rate * n.plays / nullif((n.plays + coalesce(t.plays, 0)), 0)) + (coalesce(t.avg_retention_rate, 0) * coalesce(t.plays, 0) / nullif((n.plays + coalesce(t.plays, 0)), 0)) as avg_retention_rate,\n    (n.avg_playback_rate * n.plays / nullif((n.plays + coalesce(t.plays, 0)), 0)) + (coalesce(t.avg_playback_rate, 0) * coalesce(t.plays, 0) / nullif((n.plays + coalesce(t.plays, 0)), 0)) as avg_playback_rate,\n    cast((coalesce(n.avg_content_watched_sec, 0.0) / cast(60 as float) * n.plays + coalesce(t.avg_content_watched_mins, 0.0) * coalesce(t.plays, 0.0)) / nullif((n.plays + coalesce(t.plays, 0.0)), 0.0) as float) as avg_content_watched_mins\n\n  from new_data n\n\n  left join SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_stats t\n  on n.media_identifier = t.media_identifier\n\n)\n\n, percent_progress_reached as (\n\n    select\n      p.media_identifier,\n      \n    split(p.percent_progress_reached, ',')\n as percent_progress_reached\n\n    from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_base p\n\n    where -- enough time has passed since the page_view`s start_tstamp to be able to process it a a whole (please bear in mind the late arriving data)\n\n    cast(\n\n    dateadd(\n        hour,\n        10,\n        p.end_tstamp \n        )\n\n as timestamp) < \n    convert_timezone('UTC', convert_timezone('UTC', current_timestamp()))::timestamp\n\n\n    -- and it has not been processed yet\n    and p.start_tstamp > ( select max(last_base_tstamp) from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_stats )\n\n)\n\n, unnesting as (\n\n  \n    select t.media_identifier, replace(r.value, '\"', '') as value_reached\n    \n    from percent_progress_reached t, table(flatten(t.percent_progress_reached)) r\n\n\n)\n\n, pivoting as (\n\n  select\n    u.media_identifier,\n  \n  \n    sum(\n      \n      case\n      when u.value_reached = '10'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as percent_reached_10\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when u.value_reached = '25'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as percent_reached_25\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when u.value_reached = '50'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as percent_reached_50\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when u.value_reached = '75'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as percent_reached_75\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when u.value_reached = '100'\n        then 1\n      else 0\n      end\n    )\n    \n      \n        as percent_reached_100\n      \n    \n    \n  \n\n\n  from unnesting u\n\n  group by 1\n\n)\n\n, addition as (\n\n  select\n    coalesce(p.media_identifier, t.media_identifier) as media_identifier,\n\n  \n\n    \n\n    \n\n    coalesce(p.percent_reached_10, 0)\n  + coalesce(t.percent_reached_10, 0)\n    as percent_reached_10\n\n    \n\n      ,\n\n    \n\n  \n\n    \n\n    \n\n    coalesce(p.percent_reached_25, 0)\n  + coalesce(t.percent_reached_25, 0)\n    as percent_reached_25\n\n    \n\n      ,\n\n    \n\n  \n\n    \n\n    \n\n    coalesce(p.percent_reached_50, 0)\n  + coalesce(t.percent_reached_50, 0)\n    as percent_reached_50\n\n    \n\n      ,\n\n    \n\n  \n\n    \n\n    \n\n    coalesce(p.percent_reached_75, 0)\n  + coalesce(t.percent_reached_75, 0)\n    as percent_reached_75\n\n    \n\n      ,\n\n    \n\n  \n\n    \n\n    \n\n    coalesce(p.percent_reached_100, 0)\n  + coalesce(t.percent_reached_100, 0)\n    as percent_reached_100\n\n    \n\n  \n\n  from pivoting p\n\n  full outer join SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_stats t\n  on t.media_identifier = p.media_identifier\n\n)\n\n\n\n\nselect\n  p.media_identifier,\n  p.player_id,\n  p.media_label,\n  p.duration_secs,\n  p.media_type,\n  p.media_player_type,\n  p.play_time_mins,\n  p.avg_play_time_mins,\n  p.avg_content_watched_mins,\n  p.first_play,\n  p.last_play,\n  p.plays,\n  p.valid_plays,\n  p.complete_plays,\n  p.impressions,\n  p.avg_playback_rate,\n  p.plays / cast(nullif(p.impressions, 0) as float) as play_rate,\n  p.complete_plays / cast(nullif(p.plays, 0) as float) as completion_rate_by_plays,\n  p.avg_percent_played,\n  p.avg_retention_rate,\n  l.last_base_tstamp,\n\n  \n\n  \n\n    \n      coalesce(cast(a.percent_reached_10 as integer), 0) as percent_reached_10\n      \n        ,\n      \n    \n      coalesce(cast(a.percent_reached_25 as integer), 0) as percent_reached_25\n      \n        ,\n      \n    \n      coalesce(cast(a.percent_reached_50 as integer), 0) as percent_reached_50\n      \n        ,\n      \n    \n      coalesce(cast(a.percent_reached_75 as integer), 0) as percent_reached_75\n      \n        ,\n      \n    \n      coalesce(cast(a.percent_reached_100 as integer), 0) as percent_reached_100\n      \n    \n\n  \n\n  from prep p\n\n  left join (select max(last_base_tstamp) as last_base_tstamp from prep ) l\n  on 1 = 1\n\n  \n\n  left join addition a\n  on a.media_identifier = p.media_identifier\n\n  ", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_stats"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.526177Z", "completed_at": "2025-07-28T10:46:59.147045Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:59.147608Z", "completed_at": "2025-07-28T10:46:59.147622Z"}], "thread_id": "Thread-4", "execution_time": 0.8576779365539551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player_integration_tests.snowplow_media_player_base_actual", "compiled": true, "compiled_code": "\n\n\n\nselect\n    PLAY_ID, PAGE_VIEW_ID, PAGE_VIEW_ID_ARRAY, MEDIA_IDENTIFIER, PLAYER_ID, MEDIA_LABEL, SESSION_IDENTIFIER, APP_ID, DOMAIN_SESSIONID_ARRAY, USER_IDENTIFIER, USER_ID, PAGE_REFERRER, PAGE_URL, SOURCE_URL, GEO_REGION_NAME, BR_NAME, DVCE_TYPE, OS_NAME, OS_TIMEZONE, PLATFORM, DURATION_SECS, MEDIA_TYPE, MEDIA_PLAYER_TYPE, START_TSTAMP, END_TSTAMP, PAUSED_TIME_SECS, BUFFERING_TIME_SECS, ADS_TIME_SECS, SEEKS, ADS, ADS_CLICKED, ADS_SKIPPED, AD_BREAKS, IS_PLAYED, IS_VALID_PLAY, IS_COMPLETE_PLAY, PERCENT_PROGRESS_REACHED, V_COLLECTOR, TRACKER_APP_ID, \n\n    round(cast(play_time_secs as numeric(28,6)), 3) as play_time_secs,\n    round(cast(play_time_muted_secs as numeric(28,6)), 3) as play_time_muted_secs,\n    round(cast(avg_playback_rate as numeric(28,6)), 3) as avg_playback_rate,\n    round(cast(retention_rate as numeric(28,6)), 3) as retention_rate,\n    round(cast(content_watched_secs as numeric(28,6)), 3) as content_watched_secs,\n    round(cast(content_watched_percent as numeric(28,6)), 3) as content_watched_percent\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_base", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_base_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:58.544811Z", "completed_at": "2025-07-28T10:46:59.188024Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:59.188616Z", "completed_at": "2025-07-28T10:46:59.188624Z"}], "thread_id": "Thread-3", "execution_time": 0.9244425296783447, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player_integration_tests.snowplow_media_player_base_expected_stg", "compiled": true, "compiled_code": "\n\n\n\nselect\n    PLAY_ID, PAGE_VIEW_ID, PAGE_VIEW_ID_ARRAY, MEDIA_IDENTIFIER, PLAYER_ID, MEDIA_LABEL, SESSION_IDENTIFIER, APP_ID, DOMAIN_SESSIONID_ARRAY, USER_IDENTIFIER, USER_ID, PAGE_REFERRER, PAGE_URL, SOURCE_URL, GEO_REGION_NAME, BR_NAME, DVCE_TYPE, OS_NAME, OS_TIMEZONE, PLATFORM, DURATION_SECS, MEDIA_TYPE, MEDIA_PLAYER_TYPE, START_TSTAMP, END_TSTAMP, SEEKS, ADS, ADS_CLICKED, ADS_SKIPPED, AD_BREAKS, IS_PLAYED, IS_VALID_PLAY, IS_COMPLETE_PLAY, PERCENT_PROGRESS_REACHED, V_COLLECTOR, TRACKER_APP_ID, \n\n    round(cast(play_time_secs as numeric(28,6)), 3) as play_time_secs,\n    round(cast(play_time_muted_secs as numeric(28,6)), 3) as play_time_muted_secs,\n    round(cast(avg_playback_rate as numeric(28,6)), 3) as avg_playback_rate,\n    round(cast(retention_rate as numeric(28,6)), 3) as retention_rate,\n    round(cast(content_watched_secs as numeric(28,6)), 3) as content_watched_secs,\n    round(cast(content_watched_percent as numeric(28,6)), 3) as content_watched_percent,\n    round(cast(paused_time_secs as numeric(28,6)), 3) as paused_time_secs,\n    round(cast(buffering_time_secs as numeric(28,6)), 3) as buffering_time_secs,\n    round(cast(ads_time_secs as numeric(28,6)), 3) as ads_time_secs\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_base_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_base_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:59.384928Z", "completed_at": "2025-07-28T10:46:59.455547Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:59.457653Z", "completed_at": "2025-07-28T10:46:59.457663Z"}], "thread_id": "Thread-4", "execution_time": 0.07434916496276855, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.not_null_snowplow_media_player_media_stats_media_identifier.373ee3a529", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect media_identifier\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_stats\nwhere media_identifier is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:59.461507Z", "completed_at": "2025-07-28T10:46:59.473514Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:59.474239Z", "completed_at": "2025-07-28T10:46:59.474247Z"}], "thread_id": "Thread-3", "execution_time": 0.01477670669555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player.unique_snowplow_media_player_media_stats_media_identifier.2fc1fbdec6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    media_identifier as unique_field,\n    count(*) as n_records\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_stats\nwhere media_identifier is not null\ngroup by media_identifier\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:59.467884Z", "completed_at": "2025-07-28T10:46:59.475966Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:59.477225Z", "completed_at": "2025-07-28T10:46:59.477233Z"}], "thread_id": "Thread-4", "execution_time": 0.010875701904296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player_integration_tests.dbt_utils_equal_rowcount_snowplow_media_player_base_actual_ref_snowplow_media_player_base_expected_stg_.99f14ab981", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_base_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_base_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:59.478854Z", "completed_at": "2025-07-28T10:46:59.484952Z"}, {"name": "execute", "started_at": "2025-07-28T10:46:59.485555Z", "completed_at": "2025-07-28T10:46:59.485562Z"}], "thread_id": "Thread-3", "execution_time": 0.009124755859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player_integration_tests.dbt_utils_equality_snowplow_media_player_base_actual_play_id__page_view_id__page_view_id_array__media_identifier__player_id__media_label__session_identifier__domain_sessionid_array__user_identifier__user_id__duration_secs__media_type__media_player_type__page_referrer__page_url__source_url__geo_region_name__br_name__dvce_type__os_name__os_timezone__start_tstamp__end_tstamp__play_time_secs__play_time_muted_secs__paused_time_secs__buffering_time_secs__ads_time_secs__is_played__is_valid_play__is_complete_play__avg_playback_rate__retention_rate__seeks__ads__ads_clicked__ads_skipped__ad_breaks__percent_progress_reached__content_watched_secs__content_watched_percent__ref_snowplow_media_player_base_expected_stg_.50b9aa04af", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_base_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_base_expected_stg\n\n),\n\na_minus_b as (\n\n    select play_id, page_view_id, page_view_id_array, media_identifier, player_id, media_label, session_identifier, domain_sessionid_array, user_identifier, user_id, duration_secs, media_type, media_player_type, page_referrer, page_url, source_url, geo_region_name, br_name, dvce_type, os_name, os_timezone, start_tstamp, end_tstamp, play_time_secs, play_time_muted_secs, paused_time_secs, buffering_time_secs, ads_time_secs, is_played, is_valid_play, is_complete_play, avg_playback_rate, retention_rate, seeks, ads, ads_clicked, ads_skipped, ad_breaks, percent_progress_reached, content_watched_secs, content_watched_percent from a\n    \n\n    except\n\n\n    select play_id, page_view_id, page_view_id_array, media_identifier, player_id, media_label, session_identifier, domain_sessionid_array, user_identifier, user_id, duration_secs, media_type, media_player_type, page_referrer, page_url, source_url, geo_region_name, br_name, dvce_type, os_name, os_timezone, start_tstamp, end_tstamp, play_time_secs, play_time_muted_secs, paused_time_secs, buffering_time_secs, ads_time_secs, is_played, is_valid_play, is_complete_play, avg_playback_rate, retention_rate, seeks, ads, ads_clicked, ads_skipped, ad_breaks, percent_progress_reached, content_watched_secs, content_watched_percent from b\n\n),\n\nb_minus_a as (\n\n    select play_id, page_view_id, page_view_id_array, media_identifier, player_id, media_label, session_identifier, domain_sessionid_array, user_identifier, user_id, duration_secs, media_type, media_player_type, page_referrer, page_url, source_url, geo_region_name, br_name, dvce_type, os_name, os_timezone, start_tstamp, end_tstamp, play_time_secs, play_time_muted_secs, paused_time_secs, buffering_time_secs, ads_time_secs, is_played, is_valid_play, is_complete_play, avg_playback_rate, retention_rate, seeks, ads, ads_clicked, ads_skipped, ad_breaks, percent_progress_reached, content_watched_secs, content_watched_percent from b\n    \n\n    except\n\n\n    select play_id, page_view_id, page_view_id_array, media_identifier, player_id, media_label, session_identifier, domain_sessionid_array, user_identifier, user_id, duration_secs, media_type, media_player_type, page_referrer, page_url, source_url, geo_region_name, br_name, dvce_type, os_name, os_timezone, start_tstamp, end_tstamp, play_time_secs, play_time_muted_secs, paused_time_secs, buffering_time_secs, ads_time_secs, is_played, is_valid_play, is_complete_play, avg_playback_rate, retention_rate, seeks, ads, ads_clicked, ads_skipped, ad_breaks, percent_progress_reached, content_watched_secs, content_watched_percent from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:59.355116Z", "completed_at": "2025-07-28T10:47:00.069592Z"}, {"name": "execute", "started_at": "2025-07-28T10:47:00.070289Z", "completed_at": "2025-07-28T10:47:00.070304Z"}], "thread_id": "Thread-1", "execution_time": 0.9241664409637451, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player_integration_tests.snowplow_media_player_media_stats_actual", "compiled": true, "compiled_code": "\n\n\n\nselect\n    MEDIA_IDENTIFIER, PLAYER_ID, MEDIA_LABEL, DURATION_SECS, MEDIA_TYPE, MEDIA_PLAYER_TYPE, FIRST_PLAY, LAST_PLAY, PLAYS, VALID_PLAYS, COMPLETE_PLAYS, IMPRESSIONS, LAST_BASE_TSTAMP, PERCENT_REACHED_10, PERCENT_REACHED_25, PERCENT_REACHED_50, PERCENT_REACHED_75, PERCENT_REACHED_100, \n\n    round(cast(play_time_mins as numeric(28,6)), 3) as play_time_mins,\n    round(cast(avg_play_time_mins as numeric(28,6)), 3) as avg_play_time_mins,\n    round(cast(avg_content_watched_mins as numeric(28,6)), 3) as avg_content_watched_mins,\n    round(cast(avg_playback_rate as numeric(28,6)), 3) as avg_playback_rate,\n    round(cast(avg_percent_played as numeric(28,6)), 3) as avg_percent_played,\n    round(cast(play_rate as numeric(28,6)), 3) as play_rate,\n    round(cast(completion_rate_by_plays as numeric(28,6)), 3) as completion_rate_by_plays,\n    round(cast(avg_retention_rate as numeric(28,6)), 3) as avg_retention_rate\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_derived.snowplow_media_player_media_stats", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_stats_actual"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:46:59.360240Z", "completed_at": "2025-07-28T10:47:00.072001Z"}, {"name": "execute", "started_at": "2025-07-28T10:47:00.072625Z", "completed_at": "2025-07-28T10:47:00.072634Z"}], "thread_id": "Thread-2", "execution_time": 0.941950798034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowplow_media_player_integration_tests.snowplow_media_player_media_stats_expected_stg", "compiled": true, "compiled_code": "\n\n\n\nselect\n    MEDIA_IDENTIFIER, PLAYER_ID, MEDIA_LABEL, DURATION_SECS, MEDIA_TYPE, MEDIA_PLAYER_TYPE, FIRST_PLAY, LAST_PLAY, PLAYS, VALID_PLAYS, COMPLETE_PLAYS, IMPRESSIONS, LAST_BASE_TSTAMP, PERCENT_REACHED_10, PERCENT_REACHED_25, PERCENT_REACHED_50, PERCENT_REACHED_75, PERCENT_REACHED_100, \n\n    round(cast(play_time_mins as numeric(28,6)), 3) as play_time_mins,\n    round(cast(avg_play_time_mins as numeric(28,6)), 3) as avg_play_time_mins,\n    round(cast(avg_content_watched_mins as numeric(28,6)), 3) as avg_content_watched_mins,\n    round(cast(avg_playback_rate as numeric(28,6)), 3) as avg_playback_rate,\n    round(cast(avg_percent_played as numeric(28,6)), 3) as avg_percent_played,\n    round(cast(play_rate as numeric(28,6)), 3) as play_rate,\n    round(cast(completion_rate_by_plays as numeric(28,6)), 3) as completion_rate_by_plays,\n    round(cast(avg_retention_rate as numeric(28,6)), 3) as avg_retention_rate\n\nfrom SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_stats_expected", "relation_name": "SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_stats_expected_stg"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:47:00.300070Z", "completed_at": "2025-07-28T10:47:00.314617Z"}, {"name": "execute", "started_at": "2025-07-28T10:47:00.315292Z", "completed_at": "2025-07-28T10:47:00.315300Z"}], "thread_id": "Thread-4", "execution_time": 0.01804065704345703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player_integration_tests.dbt_utils_equal_rowcount_snowplow_media_player_media_stats_actual_ref_snowplow_media_player_media_stats_expected_stg_.ce0c17e3f2", "compiled": true, "compiled_code": "\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_stats_actual\n    group by id_dbtutils_test_equal_rowcount\n\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_stats_expected_stg\n    group by id_dbtutils_test_equal_rowcount\n\n),\nfinal as (\n\n    select\n    \n        a.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_a,\n          b.id_dbtutils_test_equal_rowcount as id_dbtutils_test_equal_rowcount_b,\n        \n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    \n\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-28T10:47:00.308331Z", "completed_at": "2025-07-28T10:47:00.316321Z"}, {"name": "execute", "started_at": "2025-07-28T10:47:00.316962Z", "completed_at": "2025-07-28T10:47:00.316968Z"}], "thread_id": "Thread-3", "execution_time": 0.017721891403198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowplow_media_player_integration_tests.dbt_utils_equality_snowplow_media_player_media_stats_actual_media_identifier__player_id__media_label__duration_secs__media_type__media_player_type__play_time_mins__avg_play_time_mins__avg_content_watched_mins__first_play__last_play__plays__valid_plays__complete_plays__impressions__completion_rate_by_plays__percent_reached_10__percent_reached_25__percent_reached_50__percent_reached_75__percent_reached_100__avg_playback_rate__play_rate__avg_percent_played__avg_retention_rate__ref_snowplow_media_player_media_stats_expected_stg_.e786610ea1", "compiled": true, "compiled_code": "\n\n\n\n-- setup\n\n\n\nwith a as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_stats_actual\n\n),\n\nb as (\n\n    select * from SNOWPLOW_DEV1.gh_sp_media_player_dbt_1_snplw_media_player_int_tests.snowplow_media_player_media_stats_expected_stg\n\n),\n\na_minus_b as (\n\n    select media_identifier, player_id, media_label, duration_secs, media_type, media_player_type, play_time_mins, avg_play_time_mins, avg_content_watched_mins, first_play, last_play, plays, valid_plays, complete_plays, impressions, completion_rate_by_plays, percent_reached_10, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100, avg_playback_rate, play_rate, avg_percent_played, avg_retention_rate from a\n    \n\n    except\n\n\n    select media_identifier, player_id, media_label, duration_secs, media_type, media_player_type, play_time_mins, avg_play_time_mins, avg_content_watched_mins, first_play, last_play, plays, valid_plays, complete_plays, impressions, completion_rate_by_plays, percent_reached_10, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100, avg_playback_rate, play_rate, avg_percent_played, avg_retention_rate from b\n\n),\n\nb_minus_a as (\n\n    select media_identifier, player_id, media_label, duration_secs, media_type, media_player_type, play_time_mins, avg_play_time_mins, avg_content_watched_mins, first_play, last_play, plays, valid_plays, complete_plays, impressions, completion_rate_by_plays, percent_reached_10, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100, avg_playback_rate, play_rate, avg_percent_played, avg_retention_rate from b\n    \n\n    except\n\n\n    select media_identifier, player_id, media_label, duration_secs, media_type, media_player_type, play_time_mins, avg_play_time_mins, avg_content_watched_mins, first_play, last_play, plays, valid_plays, complete_plays, impressions, completion_rate_by_plays, percent_reached_10, percent_reached_25, percent_reached_50, percent_reached_75, percent_reached_100, avg_playback_rate, play_rate, avg_percent_played, avg_retention_rate from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n", "relation_name": null}], "elapsed_time": 8.262810230255127, "args": {"partial_parse": true, "cache_selected_only": false, "indirect_selection": "eager", "partial_parse_file_diff": true, "invocation_command": "dbt docs generate", "source_freshness_run_project_hooks": false, "version_check": true, "exclude": [], "send_anonymous_usage_stats": false, "log_file_max_bytes": 10485760, "favor_state": false, "warn_error_options": {"include": [], "exclude": []}, "require_explicit_package_overrides_for_builtin_materializations": true, "select": [], "defer": false, "vars": {}, "project_dir": "/home/runner/work/dbt-snowplow-media-player/dbt-snowplow-media-player/integration_tests", "empty_catalog": false, "populate_cache": true, "printer_width": 80, "quiet": false, "show_resource_report": false, "write_json": true, "log_level": "info", "introspect": true, "profiles_dir": "./ci", "enable_legacy_logger": false, "require_resource_names_without_spaces": false, "use_colors_file": true, "which": "generate", "strict_mode": false, "compile": true, "log_level_file": "debug", "log_path": "/home/runner/work/dbt-snowplow-media-player/dbt-snowplow-media-player/integration_tests/logs", "print": true, "log_format_file": "debug", "static_parser": true, "macro_debugging": false, "static": false, "log_format": "default", "use_colors": true}}